package com.mobiquity.packer;

import com.mobiquity.util.FileParser;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.NoSuchFileException;


public class FileParserTest {

    @Test
    public void parseFileIntoString_nonExistentFile_ThrowAPIException() {
        Assertions.assertThrows(NoSuchFileException.class, () -> FileParser.parseFileIntoString("non_existent_file"));
    }

    @Test
    public void parseFileIntoString_existentFile_ReturnCorrectString() throws IOException {

        String result = FileParser.parseFileIntoString("src/test/resources/example_input");

        Assertions.assertEquals("81 : (1,53.38,€45) (2,88.62,€98) (3,78.48,€3) (4,72.30,€76) (5,30.18,€9) (6,46.34,€48)\n" +
                "8 : (1,15.3,€34)\n" +
                "75 : (1,85.31,€29) (2,14.55,€74) (3,3.98,€16) (4,26.24,€55) (5,63.69,€52) (6,76.25,€75) (7,60.02,€74) (8,93.18,€35) (9,89.95,€78)\n" +
                "56 : (1,90.72,€13) (2,33.80,€40) (3,43.15,€10) (4,37.97,€16) (5,46.81,€36) (6,48.77,€79) (7,81.80,€45) (8,19.36,€79) (9,6.76,€64)\n" +
                "10: (1,20,€10) (2,15.3,€34)\n" +
                "10: (1,1,€10) (2,10,€11)\n" +
                "10: (1,10,€10) (2,2,€1) (3,2,€1)\n" +
                "10: (1,1,€1) (2,2,€1) (3,10,€10)\n" +
                "10: (1,5,€10) (2,5,€1) (3,2,€1)\n" +
                "10: (1,1,€1) (2,1,€1) (3,1,€1) (4,1,€1) (5,1,€1) (6,1,€1) (7,1,€1) (8,1,€1) (9,7,€1) (10,9,€1) (11,2,€1) (12,3,€1) (13,4,€1) (14,5,€1) (15,10,€10)\n" +
                "10: (1,1,€1) (2,2,€1) (3,2,€1) (4,2,€1) (5,2,€1) (6,2,€1) (7,2,€1) (8,2,€1) (9,7,€1) (10,9,€1) (11,2,€1) (12,3,€1) (13,4,€1) (14,5,€1) (15,9,€10)\n" +
                "10: (1,1,€1) (2,2,€10) (3,2,€1) (4,2,€1) (5,2,€1) (6,2,€20) (7,2,€1) (8,2,€1) (9,7,€1) (10,9,€1) (11,2,€1) (12,3,€1) (13,4,€1) (14,6,€10) (15,9,€10)\n" +
                "10: (1,8,€1) (2,1,€10) (3,1,€1) (4,2,€1) (5,2,€1) (6,2,€20) (7,2,€1) (8,2,€1) (9,7,€1) (10,9,€1) (11,2,€1) (12,3,€1) (13,4,€1) (14,6,€10) (15,9,€10)\n" +
                "10: (1,2,€10) (2,2,€1) (3,2,€10) (4,2,€1) (5,6,€10) (6,2,€1)\n" +
                "10: (1,2,€10) (2,2,€1) (3,2,€10) (4,2,€1) (5,5,€10) (6,1,€10) (7,2,€1)\n" +
                "10: (1,1,€10) (2,3,€10) (3,6,€10) (4,6,€20) (5,6,€10)\n" +
                "10: (1,10,€50) (2,3,€50) (3,3,€40) (4,3,€40) (5,3,€45)\n" +
                "10: (1,3,€50) (2,5,€50) (3,3,€40) (4,3,€43) (5,3,€45)\n" +
                "10: (1,3,€10) (2,3,€50) (3,5,€40) (4,3,€43) (5,7,€45) (6,3,€45)\n" +
                "10: (1,5,€40) (2,5,€50) (3,5,€10) (4,5,€10) (5,4,€40) (6,5,€10)\n" +
                "10: (1,3,€50) (2,3,€40) (3,3,€30) (4,3,€40) (5,3,€20) (6,3,€10)\n" +
                "18: (1,3,€50) (2,3,€40) (3,3,€30) (4,3,€40) (5,3,€2) (6,3,€1) (7,3,€8) (8,3,€6) (9,3,€1)", result);
    }
}
